#pragma once
#include <iostream>
using namespace std;
#include <Windows.h>
#include "Mur.h"

class Map
{

private:
	
	char tab[20][90];
	CONST int CORD_X = 90;
	CONST int CORD_Y = 20;

	int mur_x[5];
	int mur_y[5];

	int* wsk_x = NULL;
	int* wsk_y = NULL;

public:

	Map();

	void show();
	void show(int x, int y);

	bool show_WALL_x(int cordX);
	bool show_WALL_y(int cordY);

	//pobiera wspolrzedne x i y i sprawdza czy nie ma kolizji z obiektem
	bool if_empty_space(int x, int y);

	Mur mur;
};
Map::Map() {
	//inicjuje wskazniki za pomoca funckji classy mur zwraca wskaznik do tablicy intow;
	wsk_x = mur.getX();
	wsk_y = mur.getY();

	for (int i = 0; i < 5; i++) {
		mur_x[i] = wsk_x[i];
	}
	for (int i = 0; i < 5; i++) {
		mur_y[i] = wsk_y[i];
	}
}

//@show pierwsze wyswietlenie mapy
void Map::show() {
	{
		
		HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		for (int i = 0; i < CORD_Y; i++) {
			for (int j = 0; j < CORD_X; j++) {

				if (i == 0 || i == 19) {
					tab[i][j] = '=';
					cout << tab[i][j];
				}
				else if (show_WALL_x(j) && show_WALL_y(i)) {
					tab[i][j] = '#';
					cout << tab[i][j];
				}
				else if (j == 89 || j == 0) {
					tab[i][j] = '|';
					cout << tab[i][j];
				}
				else if (j == 15 && i == 15) {
					tab[i][j] = '@';
					SetConsoleTextAttribute(hConsole, 12);
					cout << tab[i][j];

					
					SetConsoleTextAttribute(hConsole, 15);
				}
				else {
					tab[i][j] = ' ';
					cout << tab[i][j];
				}
			}

			cout << endl;
		}
	}
}
// @overload show funkcji show pobiera cordy Hero 
void Map::show(int y, int x) {

	system("CLS");
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
//

	for (int i = 0; i < CORD_Y; i++) {
		for (int j = 0; j < CORD_X; j++) {

			if (i == 0 || i == 19) {
				tab[i][j] = '=';
				cout << tab[i][j];
			}
			else if (show_WALL_x(j) && show_WALL_y(i)) {
				tab[i][j] = '#';
				cout << tab[i][j];
			}
			else if (i == y && j == x) {
				tab[i][j] = '@';
				SetConsoleTextAttribute(hConsole, 12);

				cout << tab[i][j];
				SetConsoleTextAttribute(hConsole, 15);
			}
			else if (j == 89 || j == 0) {
				tab[i][j] = '|';
				cout << tab[i][j];
			}
			else {
				tab[i][j] = ' ';
				cout << tab[i][j];
				
			}
		}

		cout << endl;
	}

	
}
//@show_WALL_x rysuje rzad w pozycji x
bool Map::show_WALL_x(int cordX)
{
	//biore tylko 2 z int[5]
	for (int i = 0; i<1; i++) {

		if (mur_x[i] == cordX) {
			
			return true;
		}
	}
	return false;
}
//@show_WALL_y rysuje rzad w pozycji y
bool Map::show_WALL_y(int cordY)
{
	for(int i = 0;i<5;i++){
		if (mur_y[i] == cordY) {
			;
			return true;
		}
	}
	return false;
}
// @if_empty_space zwraca prawde jesli pole jest puste ' '!
inline bool Map::if_empty_space(int x, int y)
{
	if (tab[y][x] == ' ') {
		return true;
	}
	return false;
}
